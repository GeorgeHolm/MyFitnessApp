// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id            Int @id @default(autoincrement())
  uid           String
  email         String
  workouts      Workout[]
  meals         Meal[]
  name          String @default("")
  sex           String @default("")
  age           Int @default(0)
  bio           String @default("")
  likedWorkouts ProfileWorkoutLikes[]
  touchWorkouts ProfileWorkoutTouched[]
  likedMeals    ProfileMealLikes[]
  touchMeals    ProfileMealTouched[]
}

model Workout {
  id            Int @id @default(autoincrement())
  profile       Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId     Int
  notes         String
  exercises     Exercise[]
  profileLikes  ProfileWorkoutLikes[]
  profileTouch  ProfileWorkoutTouched[]
}

model Exercise {
  id            Int @id @default(autoincrement())
  workout       Workout @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  workoutId     Int
  name          String
  sets          Set[]
}

model Set {
id              Int @id @default(autoincrement())
exercise        Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
exerciseId      Int
weight          Float
reps            Int
}

model Meal {
  id            Int @id @default(autoincrement())
  profile       Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId     Int
  notes         String
  foods         Food[]
  totalCalories Float
  totalCarbs    Float
  totalFats     Float
  totalProteins Float
  totalGrams    Float
  profileLikes  ProfileMealLikes[]
  profileTouch  ProfileMealTouched[]
}

model Food {
  id            Int @id @default(autoincrement())
  meal          Meal @relation(fields: [mealId], references: [id], onDelete: Cascade)
  mealId        Int
  name          String
  calories      Float
  carbs         Float
  fats          Float
  proteins      Float
  grams         Float
}


model ProfileWorkoutLikes {
  id         Int @id @default(autoincrement())
  profile    Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)
  workout    Workout? @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  profileId  Int?
  workoutId  Int?
}

model ProfileWorkoutTouched {
  id         Int @id @default(autoincrement())
  profile    Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)
  workout    Workout? @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  profileId  Int?
  workoutId  Int?
}

model ProfileMealLikes {
  id         Int @id @default(autoincrement())
  profile    Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)
  meal       Meal? @relation(fields: [mealId], references: [id], onDelete: Cascade)
  profileId  Int?
  mealId     Int?
}

model ProfileMealTouched {
  id         Int @id @default(autoincrement())
  profile    Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)
  meal       Meal? @relation(fields: [mealId], references: [id], onDelete: Cascade)
  profileId  Int?
  mealId     Int?
}